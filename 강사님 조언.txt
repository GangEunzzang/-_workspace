<220203>
실행시 에러(Runtime Error)
: 정상적으로 실행되다가 갑자기 발생하는 에러
=> 런타임에러가 발생하면 프로그램이 종료됨

Java에서는 Runtime Error를 Exception이라고 부름
예외처리는 Exception이 발생했을 때 '프로그램이 종료되지 않게'함

고가용성(High Availablity)을 보장


<220207>
프로그래밍에서
static (실행 전) 정적, 변화가 없다. 미리 준비됨
dynamic (실행 시, 후=run-time) 동적, 변화가 있다. 미리 준비되지 않음
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
객체지향에서는
1. 클래스를 만들고
2. 클래스를 이용해서 인스턴스(실체.실행메모리 탑재)를 만들고
3. 인스턴스를 사용해서 코딩 진행
=>static은 인스턴스를 만들지 않고도 사용할 수 있게 해준다.
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
setter는 private 멤버 변수를 대신 수정하는 메서드
<->getter는 private 멤버변수를 대신 읽어오는 메서드

<220210>
일반적인 입출력 순서
1. Open
=> 생략
2. 사용
3. Close


<220211>
자바에서 예외처리가 필요한 대표적 경우

1. 입출력
-파일 입출력
-데이터베이스 입출력
-네트워크 입출력
===>컴파일 에러가 남
2. 쓰레드
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
Encoding
: 코드형태를 바꾸는 것
Decoding
:원래대로 되돌리는 것


<220214>
Event란?
: 윈도우 어플리케이션에서 발생하는 모든 일을 이벤트라고 함.

Event Driven Programming
: 이벤트가 발생할 때 어떻게 동작할 지 프로그래밍 하는 방식


<220216>
멀티태스킹
:동시에 여러개의 일을 수행

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
멀티태스킹을 구현하는 방법

1. 멀티프로세스
:프로세스가 여러개

2. 멀티쓰레드
:쓰레드가 여러개
=>동시에 여러 작업이 독립적으로 수행

쓰레드
:프로세스의 서브프로세스


자바에서는 쓰레드를 이용해서 멀티태스킹 구현


<220217>
서버가 CPU가 1개보단 2,4개일때 멀티태스킹 더 유리

flag : 어떤 변수의 값 또는 함수의 리턴값을 체크해서 판단할 떄 사용하는 변수. 주로 boolean타입

Synchronous : 동기화 된 : 순서대로

**쓰레드는 기본적으로 동시(Asynchronous)에 작업
쓰레드 동기화는 순서대로(Synchronous) 작업

Ajax(Asynchronous javascript and xml)

메서드는 언제 만드는게 좋을까?
1. 특정 기능을 구현하는 코드를 재사용 할 때
1)현재 프로젝트에서 제사용
2)다른 프로젝트에서 재사용

2. 코드를 기능적으로 구분해야 할 때


<220218>
image 포맷
1. gif:간단한 아이콘이나 작은 이미지에 사용=해상도가 낮은 이미지에 사용
2. jpg:사진같은 큰 이미지에 사용=해상도가 높은 이미지에 사용
3. png:gif와 jpg의 장점을 살려 만듬

png가 현재 웹, 앱에서 표준

메서드를 기준으로
전역변수 : 메서드 바깥에서 선언 => 여러 메서드에서 같이 사용. 메서드가 종료되어도 사용 가능
지역변서 : 메서드 안쪽에서 선언 => 메서드가 종료되면 소멸됨. 메서드 내부에서만 사용가능
클래스의 멤버변수는 클래스의 메서드의 전역변수이다.

Frame:애니메이션에서는 특정 장면, 오디오파일에서는 특정 위치를 의미


<220221>
9맥북 or imac 사용자 오라클 설치

m1 칩 이전
1. 부트캠프
2. vmware or virtual box 무료 가상 머신
3. 패러랠즈 유로 가상머신
4. 도커

m1칩

1. 패러랠즈
2. 클라우드

--------------------------------------------------------------------------------------------
  전역데이터베이스 이름 => sid라고도 함.
Enterprise Edition : orcl(기본값) - 설치시 변경가능.
Express Edtion : xd - 설치시에 자동결정
=> java등 응용프로그램에서 db에 연결할 때 sid를 알아야 함.
------------------------------------------------------------------------------------------------

Oracle GUI Tool
1. Toad - 상용
2. SQL Developer - 무료
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
대표적인 DB
1. Oracle
2. MS-SQLServer
3. MySQL
=> Oracle에 인수됨
=>MySQL개발자가 오라클에서 퇴사 후 MariaDB(MySQL클론(?))발표


Oracle+Java(JSP) : 대기업, 상용

MySQL+PHP or Java : 중소기업, 무료
=> 국내 웹호스팅의 대부분을 차지

MS-SQLServer+ASP or ASP.NET:중소기업, 일부대기업
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
DBA(DataBase Administrator):DB관리자
1. DB설치
2. 사용자계정생성
3. 권한설정
4. 보안
5. 백업/복구

DB관리자와 개발자는 분리되는 것이 원칙.
DBA도 전문 영역이다.

보안관제서비스
:IDC센터나 웹호스팅업체에서 서버를 365일 모니터링해주는 서비스

SCOTT.tiger
=> SCOTT은 연습용 계정
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
백업(Backup)/복구(Recovery)
Dump로 Backup과 비슷한 의미

테이블은 데이터가 저장되는 기본 단위

emp=사원
dempt=부서
salgrade=급여등급
bonus=상여금

DB작업순서
1. 서버설치
2.DB생성
3. 계정생성
4. 권한설정////까지는 관리자
5. 테이블생성///부터 개발자
6. 데이터입력
7. 데이터검색/수정/삭제 등의 작업

DataBase
1. 좁은의미 : 데이터를 저장하는 물리적인 파일
2. 넓은의미 : 데이터베이스 서버 .ex 오라클 등..

DBMS(DataBase Management System)
: 데이터베이스 관리 시스템
=> 근래에는 잘 사용하지 않는다.

DBS(DataBase System)
: DB+DBMS+User


<220222>

ERD(Entity Relationship Diagram)

order by는 처리하는 시간이 오래걸린다.
데이터가 많을 수록 order by 시간이 비례해서 오래걸림!
=> 튜닝의 대상. index사용

union 사용시 주의 할 점
1. 컬럼의 갯수가 같아야 한다
2. 합치는 컬럼의 데이터타입이 호완되어야한다.
3. order by는 마지막에 작성. 합쳐진 후 적용됨


<220223>
NCS(National Competency Standards) 국가직무능력 표준

1. 프로그래밍 언어 활용
학습모듈 다운로드-프로그래밍 언어 활용
2. 프로그래밍 언어 응용
3. 네트워크 프로그래밍구현

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
함수라이브러리 : 함수들을 묶어 놓은 것

JAVA에서는 JAVA API에 메서드가 만들어져 있음

jar : java 응용프로그램 라이브러리 형식
Runnable jar : 실행가능한 jar.main함수가 포함되어있어야함


<220225>
상호연관서브쿼리
: 바깥쪽 쿼리에서 사용하는 테이블과 안쪽 쿼리에서 사용하는
  테이블이 서로 연관 지어져서 동작.
=> 조인과 유사
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
index : 검색속도를 향상시키기 위해서 만든다.

index의 특징
1. 정렬이 되어 있다.
2. 데이터가 위치하는 row-id가 적혀있다.
★3. pk를 만들면 index가 자동으로 생성된다.
4. 데이터가 증가하면 index도 증가된다.
5. 데이터가 변경되면 index도 변경된다.
★6. 쿼리문(select문)을 분석해서 만든다. where절에 나오는 컬럼 사용
       => 검색속도를 측정.
   ex) select * from emp where job='CLERK';
       => job을 가지고 index를 만든다.
        select * from emp where sal=3000;
       => sal을 가지고 index를 만든다.
7. 관리자와 개발자의 협업이 필요하다.


<220310>

트리거가 for each row 옵션을 사용하는 경우
: old는 변경하기 전 행이 들어감
: new는 변경된 행이 들어감

정규화
: 테이블을 여러개로 나누는 것. 테이블간 relation 됨
비정규화
:여러개로 나뉘었던 테이블을 성능향상의 목적으로 합치는 것
=> 튜닝
-----------------------
validation
1. 응용프로그램에서 수행
ex) 웹에서는 javascript로 주로 구현
2. db에서 수행
ex) constraint를 이용

stored procedure를 만들어서
스케줄러에 등록하면
매일 같은 시간에 같은 작업을 자동으로 반복할 수 있음

java jsp에서는 쿼트같은 스케줄러 라이브 러리를
사용해서 작업할 수 있다

<220314>
크로미움
:크롬브라우저 소스 코드를 공개한 것.
=>MS edge, Naver whale 등이 사용

viewport
:모바일 웹에서 모바일 디바이스의 가로 크기에 따라서 폰트크기와 이미지크기를 자동조절
=>필수

symantic tag
:시각적인 효과보다는 의미를 부여하는 태그
=> device에게 의미를 전달
예: 검색엔진, Screen Reader 등
=> HTML5에 많은 sysmantic tag가 추가됨

/ : 루트 디렉토리
./ : 현재 디렉토리. 생략가능
../ : 상위 디렉토리
상대경로에서는 현재디렉토리가 기준

* img, js, css 폴더는 모든 페이지에서 사용하는 공용폴더이므로
  절대경로표기법을 사용하면 페이지의 경로가 변경되도 수정할 필요가 없다..


모던웹에서 잘 사용하지 않는 태그
1. table : 표 형태로 만들 때만 사용.
=> 레이아웃을 설정할 때 사용하면 안됨
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
Block Element
: 줄이 바뀜, 가로사이즈가 화면 전체 차지
예) h1, p, div

Inline Element
: 줄이 안바뀜, 가로사이즈가 컨텐츠 사이즈 만큼 차지
예) i, b, span

html에서는 enter키를 쳐도 줄이 안바뀜.


<220315>
CSS셀렉터
1. Element(Tag) Selector
   h1 {color:red;}
2. id Selector
   #para1{color:red}
   <p id="para1">css3</p>
    => id명은 중복되지 않게 사용
3. class Selector.
   .center {text=align:center;}
   p.center {text-align:center;} - p태그의 class가 center인 것만 적용
   <h1 class="center">CSS3</h1>
   <p class="center">CSS3</p>
   => class명은 중복사용 가능
4. universal Selector
   * { padding:0; margin:0}
   => 모든 엘리먼트에 적용
   => 브라우저마다 엘리먼트에 적용된 기본 여백이 다르다.
5. grouping Selector
   div, span, .center{color:green;}
   => 열거한 선택자에 모두 적용
6. descendant selector
   div i{color:red;}
   => 자손태그 모두에 적용
------------------------------------------------------
7. child selector
   div>i{color:blue;}
   => 자식태그 모두에 적용
8. sibling selector
   div+i{color:red;}
   => 같은 레벨의 태그(sibling tag) 중 바로 다음 것에만 적용
9. general sibling selector
   div~b{color.red}
   => 같은 레벨의 태그(sibling tag) 전부 적용
--------------------------------------------------------
10. psuedo class
     input:checked{ width:50px; height:50px;}
     => selector:psuedo class

11. pusedo element
     h1::before{content::url("simle.jpg");}
     => select::psuedo element

12. attribute selector
1) a[target]
=>a태그에 target속성이 있는 것을 찾는다.

2) a[target=_blank]
=> a태그에 target속성의 값이 _blank인 것만 찾는다.

3) img[title~=flower]
=>img 태그의 title속성의 값에 flower라는 단어가 들어있는 경우 찾는다
=>단어와 단어는 space로 구분하는 경우 사용
예) <img title="flower">
     <img title="sun flower">

4) img[class|=top]
=>img태그의 class속성의 값에 top이라는 단어가 들어있는 경우 찾는다
=>단어와 단어는 -(하이픈)으로 구분하는 경우 사용
예) <img class="top-header">

5) img[class^=top]
=>img태그의 class속성의 값이 top으로 시작되는 경우 찾는다
예)<img class="topHeader">

6)img[class$="test"]
=>img태그의 class속성의 값이 text로 시작되는 경우 찾는다
예) <img class="mytest">

7) img[class*="te"]
=>img택의 class속성의 값이 te가 포함된 경우 찾는다
예) <img class="test">

<220316>
CDN(Contents Delivery Network)

<220317>
Fram
: Animation 에서 장면 하나하나를 Frame이라고 함

fps : frames per second
: 1초동안 실행되는 프레임의 수

30fps
60fps

Key Frame
: Frame 중에서 중요한 포인트가 되는 Frame


<220318>
Prototype
: 개발 초안, 데모

display 속성은 애니메이션에서 사용할 수 없음
opacity를 이용해서 보이거나 안보이게 애니메이션 효과 가능


<220321>
Bootstrap3       ->        Bootstrap4
1. grid가 변경됨

2. panel이 card로 변경됨

1. 부트스트랩 사용시
: 부트스트랩에서 작성된 코드를 최대한 활용.
=> 너무 많은 변경은 지양

2. 부트스트랩 없이 직접코딩
: 직접 모두 코딩
=> 세세하게 작성 가능. 시간이 오래걸림



반응형 웹페이지 만들 떄 유의점
* desktop은 가로모드. landscape
  moblie은 세로모드. poreatis

1. 이미지나 동영상의 가로*세로 비율 변경
=> media 쿼리로 이미지나 동영상 교체

2. 컨텐츠가 모바일이 더 단순한 형태 필요
=> 글자를 없애거나 줄인다.

3. 박스의 세로크기를 조절
=>모바일에서는 높이가 더 크게 조절

5. 여백을 조절
=> desktop에서는 좌우여백이 중요
     moblie에서는 상하여백이 중요


-----------3/22--------------

iframe에서 auto resize로 높이를 조절할 때는 웹페이지의 도메인과 iframe에
불러오는 컨텐츠(게시판)의 도메인이 같아야한다.

cross domain
 : domain주소가 다르다는 뜻

-------------3/23-----------
슬릭 슬라이더 - 쿠팡이츠 같이 몇개의 사진이 자기 혼자 넘어가는거(사용가능)
여러가지 컨텐츠가 있다.

포토라마 - 이것도 여러가지 css 쓸만한것들이 있다 ㅎ

start bootstrap ! -  부트스트랩 템플릿 사이트

--------------3/24----------

GUI Toll for GIT
: Source Tree, 이클립스 GIT플러그인...

javascript
: 웹표준 스크립트언어
=> 예전에는 vbxcript, jscript도 사용했음
     (실제로는 거의 사용안함)
=> html5에서는 표준화

jQuery
: javascript libray(또는 framework)
* library 와 framework의 차이(?)
=> 대체적으로 library는 함수로 이루어져있다.
     framework는 함수 + 컴포넌트의 개념
=> framework가 library보다는 좀 더 복잡한 개념
*** ajax, dom, animation 작업을 편하게 할 수 있다.

3. AngularJS
: 구글에서 만든 javascript framework
=> jQuery보다 생산성 향상

4.Reack Js
: facebook에서 만든 javascript library
=> React Native: ReactJS기반으로 앱개발 가능

5. VueJS
: AngularJS문법 + ReactJS의 장점(Virtual DOM)

6. Vanila Script
: 순순하게 javascript만 사용


---------------------------------------------------------------------
Front End Developer
: Javascript 전문가

인터프리터 방식
: 컴파일을 해서 실행파일이 생성되는 것이 아니라
코드를 한줄씩 해석해서 바로 실행하는 방식
ex) 파이썬, javascript, R 등등..
=> 인터프리터방식 언어들은 변수선언시
대체적으로 타입을 지정하지 않는다.

------0325------------------
정규식(Regular Expression)
: validation에 사용하는 언어(?)

MDN(Mozilla Develop Network)  - 홈페이지
: Front End 개발자 네트워크
특히 자바스크립트 관련자료 우수

scheduling(예약)
: 

-----------0329------------
jQuery의 장점
=> js코드와 tag가 완벽히 분리
** 로직과 ui가 완벽히 분리

협업과 유지보수의 편리서을 위해서
ui와 로직을 분리

jquery delegate(중요 **********************)
=> 아직 생성되지 않은(동적으로 나중에 생성될) 자식 엘리먼트에 
예외처리를 부모에게 위임한다는 뜻.
=> 부모쪽에 이벤트 처리

---------------------------------------------------------------------
jQuery 사용시 편리한점

1. DOM(Document Object Model) 작업
=> 엘리먼트 탐색이 쉽다.

2. Animation
=> 애니메이션 구현이 편리하다.

3. Ajax
=> Ajax구현이 편리하다.

--------0331---------------

파싱(Parsing)
: 원하는 데이터만 추출

XML 파싱
JSON 파싱
: 일반적으로 XML파싱보다 JSON파싱이 코드가 간결하고
실제 실행속도도 더 빠르다.

Cross Domain
: 도메인 주소가 서로 다름

Ajax는 기본적으로 Cross Domain을 지원하지 않음
: 클라이언트, 서버의 Domain이 같아야됨
=> JQuery코드와 php,jsp,asp,net 코드가 같은 도메인에 있어야함.
=> 서버에서 Cross Domain을 허용하면 가능하다.

JSONP를 이용하면 서버에서 Cross Domain을 허용하지 않아도 
우회해서 처리가능

플러그인?
: 주 프로그램에 쉽게 붙여 쓸수 있는 확장프로그램

-----------0401--------------
양방향 바인딩
: ui와 model이 바인딩이 되어있을 때

변화
model -> ui 적용
ui(input) -> model 적용이 모두 됨

Angular.JS, Vue.JS는 양방향 바인딩 지원

React.JS는 단방향 바인딩 지원

----------------------------------------------------
Full Stack
: Front End, Back End를 모두 개발

MEAN stack
: MongoDB, Express, Angular.JS, Node.js

MERN stack
: MongoDB, Express, React.JS, Node.js

-----------------------------------------------------
vue.js와 react.js는 Ajax를 처리하는 함수를 제공하지 않는다.
=> Angular.js는 제공
1. Axios 라이브러리
2. JQuery의 $.ajax()등
3. javascript fetch() - 근래 나옴. 앞으로 가장 많이 쓰일 가능성 높음
------------------------------------------------------------------------
Ajax에서 server에서 json을 보내오는 형식
1. [ ] - 배열
	[{name:"hkd",address:"서울"},{name:"lss",address:"제주"}

2. { } - 객체 => 한개
	{name:"hkd",address:"서울"}

3. { 속성명 : [ ] } => 객체는 하나이나 속성의 값이 여러개
	{list [{name:"hkd",address:"서울"},{name:"lss",address:"제주"}] }

-------------------------------------------------------------------------------
Serialize : 직렬화
: 객체를 데이터화 한다는뜻 

람다식 : 화살표함수 => 함수를 정의하는 또다른 방법
(parameter) => { 함수의 본문 }
(response) => { ... }
function(response) { ...}

--------------------------------04-04-----------------------
Component?
: 부품 이라는 뜻
=> MS에서 CBD(Component Based Development)를 제안
Component는 원래는 컴파일된 작은 SW부품을 의미
=> 근래에는 Class만든 어떤 특정기능을 수행하는 객체를 컴포넌트라고 부름

React.js에서는 컴포넌트를 class로 만들었으나
최근 function으로 바뀜. 둘다 사용 가능

2. React.js에서는 Virtual DOM을 도입해서 자주 변경되는 부분의 렌더링 속도를 개선함.

3. React.js는 Webpack과 Babel을 사용 
1) Webpack은 여러파일들을 패키징해서 사용하는 툴
2) Babel은 Mordern JavaScript코드를 old JavaScript코드와 호환(변환) 시켜 주는 툴

4. html을 JSX를 이용해서 렌더링

-------------------------------------------------------
create-react-app
:react.js 프로젝트를 생성하는 도구(명령어)
=> 표준 boilerplate생성 도구

* boilerplate
: 사전적인 의미는 표준문안.
=> React.js에서는 개발할 때 프로젝트를 생성하기 위한 템플릿(도구)을 의미

module
: 사전적의미는 부품. 나머지라는 뜻 %

yarm
: npm과 같은 역할. 모듈을 설치하거나 삭제하는 툴
과거에는 yarn이 npm보다 속도(성능)이 좋아서 npm 대신 사용했으나,
현재는 npm이 좋아져서 npm만 사용해도 됨.

Mount
: OS에 주변장치가 연결되는 것을 mount라고 함
예) 리눅스에서 usb를 연결	

hook
: 원래 없던 기능을 추가한 것(코드)

함수형 컴포넌트가 처음 발표됐을 때 staet를 지원하지 않음.
=> 나중에 hook으로 state 지원

------------------------------------------------
함수, 클래스, 컴포넌트 만들 때 고려사항

1. 코드 재사용성
 1) 현재 프로젝트에서 여러 곳에서 재사용
 2) 다음(다른) 프로젝트에서 재사용

2. 유지보수의 편의성
 - 코드의 재사용성이 떨어지더라도 코드를 함수로 묶어놓으면 
    유지보수에 도움이 됨. 기능이 하나의 블럭에 모여 있기 때문에...

----------------JSP --------------------------
windows에서 service ?
: Background에서 실행되는 프로그램이 service로 등록되는 것이 일반적으로
추천되는 방법
=> Server 제품들은 일반적으로 service로 등록해서 운용.

Tomcat
=> installer로 service에 등록해서 운용하는 방법 추천

실무에서는 대부분의 서버는 linux로 운영됨.
=> 대부분의 웹호스팅업체의 서버는 linux
클라우드도 기본은 linux

-------------------------------------------------------
internet 이 출현
...
..
web이 출현

동시접속자가 많은수록 Server에 로드가 걸림
동시접속자가 많을 때 WAS의 역할, DB의 역할이 중요해짐
---------------------------------------------------------------
웹프로그래밍(백엔 언어의 탄생

1.  CGI(Common Gateway Interface)
: C, Perl등의 언어를 CGI방식으로 사용.
=> 웹프로그래밍 언어가 아직 존재하기 전
기존언어를 활용해서 CGI방식으로 처리.

2. Servlet
: Java코드를 이용한 웹프로그래밍 언어

3. JSP
: MS의 ASP를 벤치마킹해서 만듦
=> UI와 Logic이 분리됨
=> JSP 코드는 컴파일될 때 Servlet으로 변환되어 실행됨.
(성능개선)	

------------------------------------------------------
Programming에서 Context

Context의 사전적 의미는 '문맥', '맥락'

Context는 information, meta와 비슷한 뉘앙스
=> 구체적이지는 않으나 관련된, 유추할 수 있는 정보를 가지고 있는 객체

Tomcat에서 Context는 웹애플리케이션에(을) 대한(위한) 정보를 가지고 있다.

------------------------------------------------------
DTO와 VO
=> Model(데이터) 담당.
=> Class로 구현

VO는 원래 read only의 개념이었으나 현재는 DTO와 비슷한 
개념으로 사용됨

-----------------------------------------------------------
request객체는 forward로 전달해야 사용할 수 있지만
session객체는 전달하지 않아도 모든 페이지에서 사용가능

너무 편리해서 초창기에는 아무 생각없이 session attribute를 마구 만들어서 사용
=> 서버 메모리가 점점 부족해서 심각해짐`
=> 로그인 처리시에만 사용하도록 노력	

--------------------------------------------------------------
Cookie vs Session
: 접속한 사용자의 정보를 기록하는 용도
예) 로그인, 팝업창(하루동안 보지 않기)

Cookie는 사용자 컴퓨터에 저장.
Session은 서버에 저장.

Session은 서버에 부담을 주기때문에 최소한으로 사용
=> 특히 동시 접속자가 많은 경우(주의 요망)	

------------------------------------------------------------------
CBD(Component Based Development)
: MS에서 큰 프로젝트를 수행할 때(규모가 큰 SW를 개발할 때)
먼저 기능별로 Component를 만들고, 만들어진 Component를 조립해서
개발하는 방법론

자바진영에서는 EJB(Enterprise java Beans)
: Java Bean이 Component에 대응되는 모델

최근에는 Class로 만든 DTO를 bean이라고 함
------------------------------------------------------------------
0428
Tag Library
: 개발자가 직접 태그를 XML기반으로 생성해서 사용가능
=> Java코드를 태그화 해서 사용가능

=> 표준의 필요성이 대두됨. JSTL 제공
-------
MVC패턴에서는
jsp에서는 java코드 대신 다음을 사용하려고 노력하자.
<%...%> 는 거의 사용하지 않음.

1. 액션태그
<jsp:..>
2. EL
3. JSTL
----------
Maven
: 라이브러리 버전관리 도구. 형상관리도구
=> Spring 프레임워크에서 기본적으로 사용
=> Maven Reposity는 라이브러리를 모아 놓은 저장소
=> Maven을 사용하면 라이브러리를 수동으로 다운로드 할 필요가 없다.
---------
단위테스트
: 개발자 각자가 자신의 코드를 테스트

통합테스트
: 개발자들의 코드를 하나로 통합해서 테스트
=> 라이브러리 버전이 서로 다르면 문제가 발생할 수 있다.

------------
0429
servlet자체에서 파일업로드 지원

파일업로드 라이브러리
1.cos.jar
2.common file upload
3.servlet 자체 지원 파일업로드

=> 실무에서 파일업로드가 빈번하고 파일의 크기 대용량일 경우
상용파일 업로드 라이브러리 구매해서 사용
예) dextupload 라이브러리

adcp

-----------
.metadata
=> workspace의 설정 파일들이 저장된 폴더
=> .metadata내의 파일이 손상되면 workspace내 프로젝트 로딩이 안됨
    : 이클립스 종료->.metadata삭제 -> 이클립스재시작하면 workspace 초기화 됨
    : 기존 프로젝트 import해서 다시 사용
-----------
파일업로드시 파일명이 중복되는 문제 해결
1. 파일명 뒤에 번호를 붙인다.
=> report.doc가 이미 존재하면 report1.doc 로 바꿔서 저장
=> 동시접속자가 많고, 파일이 많다면 문제 발생 가능
2. 파일명을 시간을 구해서 변경
3. uuid같이 절대 중복되지 않는 값을 만들어서 파일명으로 사용	


-----------------------------------------------------------------
JSP Model2(MVC)로 개발할 때 주의할 점
모든 주소는 servlet에서 매핑한 주소를 사용한다.
ex ) list.jsp , login.jsp   =>  X X X 절대 금지
=> list.do,  login.do  이런식으로 사용
=> JSP페이지로 이동할 때 컨트롤러(servlet)을 통해서 이동해야 한다.
<a href="list.do"> 목록 </a>
location.href="list.do";
window.open("popup.do"....);

2. CRUD 작업은 Model을 이용한다.
=> delete할 때는 예외적으로 primary key만 사용하는 경우가 많다.

3. jsp에서는 <%.. %>을  사용하지 않는다.
=> el, jstl, 액션태그를 주로 사용

----------------------------------------------------------
SMTP Server
: Email을 전송하기 위한 서버
SMTP Server 구축 필요
예) 리눅스 - sendmail, dovecot 등
     윈도우 - MS Outlook Server 등

Google, Naver에서 무료 SMTP Server 제공
=> 대량의 스팸메일 전송은 곤란함..(차단 당할 수도?)

둘 모두 2단계 인증 사용안함으로 변경

------------------------------------------------------------------
우리 회사 웹사이트 전체 컨텐츠에서 검색을 해야 할 경우
=> 구글, 네이버를 이용하면 편리
** search engine or search bot이 웹사이트의 데이터를 수집해서 보관한다.

---------------------------------------------------------------
이클립스에 Servers탭에서 등록한 Tomcat은 개발용

Tomcat운영서버의 webappas폴더에 배포
=> .war(Web Application Archive)를 사용해서 배포
=> .war를 생성한 후. webapps에 복사(업로드)
한 다음 tomcat을 재시작하면 자동으로 압축이 해제된다.

jar)java archive)
-----------------------------------------------------------------
node.js
: 크롬브라우저의 v8 javascript 엔진으로 만든 서버 런타임
=> javascript로 코딩. 백엔드 개발 가능
=> 가성비가 좋다. 서버의 사양이 낮아도 비교적 우수한 성능 발휘

게임서버로도 최근 많이 사용

node.js에서는 non-blocking i/o 방식 사용
:비동기 방식 메서드를 주로 사용해서 처리가 동시에 이루어짐
예)
const fs = require('fs');
fs.readFile('/file.md', (err, data) => {
  if (err) throw err;
  console.log(data);
});
moreWork(); // console.log 이전에 실행될 것입니다.
=> file.md가 모두 다운로드된 다음 moreWork()가 실행되는 것이 아니라,
reaFile()과 moreWork()가 동시에 작업이 이루어지는 개념.

-------------------------------------------------------------------------------
전자 정부 프레임워크
=> 스프링 프레임워크를 기반으로 만든 대한민국 정보 표준 프레임워크
=> 공공 프로젝트에서는 필수

전자 정부 프레임워크 4.0부터 스프링 부트 도입
-------------------------------------------------------------------------------
Spring(MVC) vs Spring Boot
=> Spring은 개발환경 설정이 복잡하다.
Spring Boot는 개발환경 설정이 비교적 쉽다.
------------------------------------------------------------------------------
민간기업에서는 전자정부 프레임워크를 써야할 의무가 없으므로
최신 프레임워크, 라이브러리를 더 잘 활용하는편.
=> 스타트업 처럼 개발자조직이 젊을수록 더 할 가능성이 높음

Spring Boot 개발환경 구성

1. Maven + MyBatis
2. Gradle + MyBatis
3. Gradle + JPA

=> IDE는 STS or Intelij or Eclipse

MyBatis vs JPA
=> MyBatis는 xml에 sql을 작성
=> JAP는 sql이 자동생성됨

JAP는 테이블간에 복잡한 릴레이션이 형성되어서,
조인이 복잡해 질 수록 구현이 어렵다.

일부회사는 JPA와 MyBatis를 병행해서 사용
단순한 CRUD는 JPA
복잡한 조인은 MyBatis

언어와 라이브러리, 프레임워크는 도구이다
=> 도구 자체가 목적이 되면(?) 휴~~~~~~~~~~~~~~~~~


---------------------------------------------------------
- 책의 구성
Gradle + JPA + Spring Boot + IntelliJ

- 이전 책 구성
Maven + MyBatis + Spring + STS

Java
=> IntelliJ Ultimate : 상용
=> IntelliJ Community : 무료

Eclipse는 Java개발에 사용하는 무료 IDE 대명사 오픈소스
=> STS도 Eclipse로 개발
=> 전자정부 프레임워크 IDE도 Eclipse로 개발

MVC
Model
View
Controller - Servlet
-----------------------------------------------------------------------------
Spring
Controller -@RestController, @Controller 등 사용해서 구현.

-----------------------------------------------------------------------------
ORM(Object Relational Maping)
=> RDB의 Relation(관계)를 객체로 구현하는 기술
=> ORM을 사용하면 RDB가 감춰진다 (?)
=> SQL을 사용하지 않고 자바코드로 대체
=> RDB의 테이블을 객체화(?)

JPA(Java Presistence API)
: Java에서 ORM을 구현

OOODB(Object Oriented DataBase)
=> 기존 RDB는 객체지향적이지 않으므로,
객체지향적으로 설계한 DB

기존 RDB도 객체지향의 개념을 도입
예) 서버명.사용자명.DB명.테이블명.컬럼명
---------------------------------------------------------------------------
Entity
=> RDB에서  Entity는 객체와 비슷한 개념
=> Entity가 물리적으로 구현된 것이 Table

ERD(Entity Relationship Diagram)
=> DB 설계시 작성

Design Pattern
=> 클래스를 설계하는 방법론
예) builder패턴, singleton 패턴 등

builder패턴
=> 모델역할을 하는 기본클래스와 
     기본 클래스의 필드에 값을 저장하는 역할을
     하는 보조 클래스가 한 쌍으로 되어 있다.

=> 기본 클래스의 private 필드에 값을 초기화 하는
     역할을 생성자가 아니라 보조클래스의
      setter,getter를 통해서 작업

=> 보조 클래스의 setter는 보조 클래스 객체 레퍼런스를
     리턴(return this)
      : name("홍길동").age(12) 형식으로 사용
------------------------------------------------------------------------------
Inject 주입
: 객체를 생성자를 호출해서 생성하지 않고 선언만으로 자동생성(주입) 됨

----------------------------------------------------------------------------------
Thymeleaf - 타임리프
=> JSP 대체
--------------------------------------------------------------------------------
@Controller
: 컨트롤러 생성
@RestController
: Ajax개발을 위한 컨트롤러 생성
------------------------------------------------------------------------------
NameSpace
: 이름영역
=> java의 패키지와 유사한 역할
=> XML, C#등에서 사용
------------------------------------------------------------------------
스프링에서 Controller는
같은 이름의 view를 자동으로 찾아서 출력
forward()코드 없이...
---------------------------------------------------------------------------
spring controller에서
1. 리턴값이 void이면 주소가 바뀌지 않는다(기본값)
2. return "redirect : 변경될주소 " 형식을 사용하면 주소가 변경된다.
=> sendRedirect 역할
-----------------------------------------------------------------------------
의존성주입(자동주입)
=> Field에 @Autowired, @Inject를 붙이지 않아도 주입이 된다.
=> RequiredArgsConstructor는 final, @NonNull이 붙은 field를
parameter로 갖는 생성자를 자동으로 구현해준다.
------------------------------------------------------------------------------
주입(Inject)
=> new 생성자(); 작성없이 instance가 생성됨.
-------------------------------------------------------------------------------
MVC패턴에서 Service 계층이 있을경우

Controller -> Service -> Repository(DAO) 로 접근

Controller -> Repository(DAO)로 접근하면 안됨 ! ! ! ! ! ! !
--------------------------------------------------------------------------------
Spring으로 MVC을 구현할 때 편리한 점

1. Spring 에서는 view에 입력한 값이 Controller에 전달되면 dto에 자동 수집 된다.

2. Controller에서 view로 forward가 자동으로 이뤄진다.
---------------------------------------------------------------------------------
Spring에서 Controller 메서드의 Parameter는 
전달되는 값이 있으면 수집을 하고,
없으면 생성.

자동수집이 강력하다
=> Controller 메서드의 parameter가 객체인 경우..
     View에서 넘어오는 url parameter와 같은 이름의 field가
     존재하면 자동수집됨.
----------------------------------------------------------------------------------
where guestbook.gno >?
and(guestbook.title like '%한글%' escape '!'
or guestbook.content like '%한글%' escape
-
-----------------------------------------------------------------------------
Authentication(인증)
: id, pw가 일치하는지 확인하는 작업

Authorization(인가)
: 권한을 확인하는 작업

-----------------------------------------------------------------------------
스프링에서 로그인을 구현하는 방법
1. 직접구현
=> session사용
2. interceptor
3. spring security
------------------------------------------------------------------------------
referer
=> 현재 url에 접근하는 이전 url정보를 가지는 객체	
-----------------------------------------------------------------------------
Spring Security에서 회원의 권한(Role)은 복수개로 생각함.
------------------------------------------------------------------------------
Open API 사용 기본 개념
=> Open API 서버(서비스)를 사용할 수 있는 키를 발급 받는다.
=> Open API 서버(서비스)

------------------------------구글 계정 로그인--------------------------
My Project 88895
ID : 250555694176-ffo2vu683c7imkm3r2b6h3o2h3qcncsg.apps.googleusercontent.com
PW: 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
-----------------------------------------------------------------------------
Spring Security 관련 프로젝트시 추가로 해야할 일

1. 자체 회원가입 기능 구현
2. csrf토큰 처리
=> post,put,delete 방식 전송인 경우
3. 로그인폼 customizing
=> 프로젝트에 맞게 수정
----------------------------------------------------------------------------
@ManyToOne
=> 1:다 관계에서 '다'에 해당하는 entity에서 설정

@OneToMany
=> 1:다 관계에서 '1'에 해당하는 entity에서 설정
--------------------------------------------------------------------------
@ManyToOne
=> RDB에서 참조키의 역할과 가장 흡사하기 때문에 주로 이용

@OneToMany
=> RDB에서는 존재하지 않는 개념
-------------------------------------------------------------------------
JPA에서 cascade
:RDB의 참조키에 설정하는 on delete cascade on update cascade
개념과 비슷하나 동작하는 방식이 다르다.
=> JPA에서는 @ManyToOne, @OneToMany 양쪽에 설정 가능
=> JPA에서는 RDB와 다르게 insert해서 양쪽을 똑같이 맞춤.

ex) @ManyToOne(cascade=CascadeType.ALL)
=> RDB에서는 참조키가 참조하는 primary key가 없을 경우 에러가 나지만,
JPA는 이경우 primary key를 먼저 만들어서 처리하는 것을 시도한다.

@OneToMany(cascade = CascadeType.ALL)
=> RDB에서 참조키에 설정하는 on delete cascade on update cascade와 비슷하게
primary key가 바뀌면 참조키가 바뀌는 평식으로 동작한다.
-------------------------------------------------------------------------------
전자정부프레임워크 사용시 중요한점

1. 공통컴포넌트는 꼭 사용해야하는가?
: 반드시 사용해야 하는 것은 아님.

2. maven사용시 pom.xml에 전자정부프레임워크 실행환경 <dependency> 추가 필수
:egovframework.rte

3. controller에서 dao나 mapper를 호출 하면 안됨
: service를 통해서 dao나 mapper가 호출해야 됨

4. ~ServiceImple은 EgovAbstractServiceImpl를 상속 받아야 함

5. dao는 EgovAbstractDAO를 상속받아야 함

6. mapper는  EgovAbstractMapper를 상속받아야 함

7. 샘플프로젝트를 꼭 생성해서 시작해야하나?
: 다른 구조로 해도 상관없음. 단, 2 ~ 6 규칙 준수
=> 회사마다 프로젝트 구조 다를 수 있다. 
1. sts 에서 사용하는 구조
2. 개발자 직접 구조 설정
3. 샘플프로젝트 구조

자세한 내용은 다음 문서 참고.
https://maven.egovframe.go.kr/publist/HDD1/public/documents/%ED%91%9C%EC%A4%80%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC%20%EC%84%B8%EB%B6%80%20%EC%A0%81%EC%9A%A9%EA%B8%B0%EC%A4%80.pdf

